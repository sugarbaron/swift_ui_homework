//
// DefaultAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire


open class DefaultAPI {
    /**
     Best Seller History List

     - parameter ageGroup: (query) The target age group for the best seller. (optional)
     - parameter author: (query) The author of the best seller. The author field does not include additional contributors (see Data Structure for more details about the author and contributor fields).  When searching the author field, you can specify any combination of first, middle and last names.  When sort-by is set to author, the results will be sorted by author&#x27;s first name. (optional)
     - parameter contributor: (query) The author of the best seller, as well as other contributors such as the illustrator (to search or sort by author name only, use author instead).  When searching, you can specify any combination of first, middle and last names of any of the contributors.  When sort-by is set to contributor, the results will be sorted by the first name of the first contributor listed. (optional)
     - parameter isbn: (query) International Standard Book Number, 10 or 13 digits  A best seller may have both 10-digit and 13-digit ISBNs, and may have multiple ISBNs of each type. To search on multiple ISBNs, separate the ISBNs with semicolons (example: 9780446579933;0061374229). (optional)
     - parameter price: (query) The publisher&#x27;s list price of the best seller, including decimal point (optional)
     - parameter publisher: (query) The standardized name of the publisher (optional)
     - parameter title: (query) The title of the best seller  When searching, you can specify a portion of a title or a full title. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func gETListsBestSellersHistoryJson(ageGroup: String? = nil, author: String? = nil, contributor: String? = nil, isbn: String? = nil, price: String? = nil, publisher: String? = nil, title: String? = nil, completion: @escaping ((_ data: InlineResponse2001?,_ error: Error?) -> Void)) {
        gETListsBestSellersHistoryJsonWithRequestBuilder(ageGroup: ageGroup, author: author, contributor: contributor, isbn: isbn, price: price, publisher: publisher, title: title).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Best Seller History List
     - GET /lists/best-sellers/history.json
     - 

     - API Key:
       - type: apiKey api-key (QUERY)
       - name: api-key
     - examples: [{contentType=application/json, example={
  "copyright" : "copyright",
  "results" : [ {
    "isbns" : [ {
      "isbn13" : "isbn13",
      "isbn10" : "isbn10"
    }, {
      "isbn13" : "isbn13",
      "isbn10" : "isbn10"
    } ],
    "contributor_note" : "contributor_note",
    "ranks_history" : [ {
      "weeks_on_list" : 2,
      "dagger" : 5,
      "bestsellers_date" : "bestsellers_date",
      "asterisk" : 1,
      "rank" : 5,
      "list_name" : "list_name",
      "primary_isbn10" : "primary_isbn10",
      "display_name" : "display_name",
      "primary_isbn13" : "primary_isbn13",
      "published_date" : "published_date",
      "ranks_last_week" : ""
    }, {
      "weeks_on_list" : 2,
      "dagger" : 5,
      "bestsellers_date" : "bestsellers_date",
      "asterisk" : 1,
      "rank" : 5,
      "list_name" : "list_name",
      "primary_isbn10" : "primary_isbn10",
      "display_name" : "display_name",
      "primary_isbn13" : "primary_isbn13",
      "published_date" : "published_date",
      "ranks_last_week" : ""
    } ],
    "contributor" : "contributor",
    "reviews" : [ {
      "article_chapter_link" : "article_chapter_link",
      "book_review_link" : "book_review_link",
      "first_chapter_link" : "first_chapter_link",
      "sunday_review_link" : "sunday_review_link"
    }, {
      "article_chapter_link" : "article_chapter_link",
      "book_review_link" : "book_review_link",
      "first_chapter_link" : "first_chapter_link",
      "sunday_review_link" : "sunday_review_link"
    } ],
    "age_group" : "age_group",
    "author" : "author",
    "price" : 6,
    "description" : "description",
    "publisher" : "publisher",
    "title" : "title"
  }, {
    "isbns" : [ {
      "isbn13" : "isbn13",
      "isbn10" : "isbn10"
    }, {
      "isbn13" : "isbn13",
      "isbn10" : "isbn10"
    } ],
    "contributor_note" : "contributor_note",
    "ranks_history" : [ {
      "weeks_on_list" : 2,
      "dagger" : 5,
      "bestsellers_date" : "bestsellers_date",
      "asterisk" : 1,
      "rank" : 5,
      "list_name" : "list_name",
      "primary_isbn10" : "primary_isbn10",
      "display_name" : "display_name",
      "primary_isbn13" : "primary_isbn13",
      "published_date" : "published_date",
      "ranks_last_week" : ""
    }, {
      "weeks_on_list" : 2,
      "dagger" : 5,
      "bestsellers_date" : "bestsellers_date",
      "asterisk" : 1,
      "rank" : 5,
      "list_name" : "list_name",
      "primary_isbn10" : "primary_isbn10",
      "display_name" : "display_name",
      "primary_isbn13" : "primary_isbn13",
      "published_date" : "published_date",
      "ranks_last_week" : ""
    } ],
    "contributor" : "contributor",
    "reviews" : [ {
      "article_chapter_link" : "article_chapter_link",
      "book_review_link" : "book_review_link",
      "first_chapter_link" : "first_chapter_link",
      "sunday_review_link" : "sunday_review_link"
    }, {
      "article_chapter_link" : "article_chapter_link",
      "book_review_link" : "book_review_link",
      "first_chapter_link" : "first_chapter_link",
      "sunday_review_link" : "sunday_review_link"
    } ],
    "age_group" : "age_group",
    "author" : "author",
    "price" : 6,
    "description" : "description",
    "publisher" : "publisher",
    "title" : "title"
  } ],
  "num_results" : 0,
  "status" : "status"
}}]
     - parameter ageGroup: (query) The target age group for the best seller. (optional)
     - parameter author: (query) The author of the best seller. The author field does not include additional contributors (see Data Structure for more details about the author and contributor fields).  When searching the author field, you can specify any combination of first, middle and last names.  When sort-by is set to author, the results will be sorted by author&#x27;s first name. (optional)
     - parameter contributor: (query) The author of the best seller, as well as other contributors such as the illustrator (to search or sort by author name only, use author instead).  When searching, you can specify any combination of first, middle and last names of any of the contributors.  When sort-by is set to contributor, the results will be sorted by the first name of the first contributor listed. (optional)
     - parameter isbn: (query) International Standard Book Number, 10 or 13 digits  A best seller may have both 10-digit and 13-digit ISBNs, and may have multiple ISBNs of each type. To search on multiple ISBNs, separate the ISBNs with semicolons (example: 9780446579933;0061374229). (optional)
     - parameter price: (query) The publisher&#x27;s list price of the best seller, including decimal point (optional)
     - parameter publisher: (query) The standardized name of the publisher (optional)
     - parameter title: (query) The title of the best seller  When searching, you can specify a portion of a title or a full title. (optional)

     - returns: RequestBuilder<InlineResponse2001> 
     */
    open class func gETListsBestSellersHistoryJsonWithRequestBuilder(ageGroup: String? = nil, author: String? = nil, contributor: String? = nil, isbn: String? = nil, price: String? = nil, publisher: String? = nil, title: String? = nil) -> RequestBuilder<InlineResponse2001> {
        let path = "/lists/best-sellers/history.json"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "age-group": ageGroup, 
                        "author": author, 
                        "contributor": contributor, 
                        "isbn": isbn, 
                        "price": price, 
                        "publisher": publisher, 
                        "title": title
        ])


        let requestBuilder: RequestBuilder<InlineResponse2001>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     * enum for parameter sortOrder
     */
    public enum SortOrder_gETListsDateListJson: String { 
        case asc = "ASC"
        case desc = "DESC"
    }

    /**
     Best Seller List by Date

     - parameter date: (path)  
     - parameter list: (path) Name of the Best Sellers List. You can get the full list from /lists/names.json 
     - parameter isbn: (query) International Standard Book Number, 10 or 13 digits (optional)
     - parameter listName: (query) The name of the Times best-seller list. To get valid values, use a list names request.  Be sure to replace spaces with hyphens (e.g., e-book-fiction or hardcover-fiction, not E-Book Fiction or Hardcover Fiction). (The parameter is not case sensitive.) (optional)
     - parameter publishedDate: (query) YYYY-MM-DD  The date the best-seller list was published on NYTimes.com (compare bestsellers-date) (optional)
     - parameter bestsellersDate: (query) YYYY-MM-DD  The week-ending date for the sales reflected on list-name. Times best-seller lists are compiled using available book sale data. The bestsellers-date may be significantly earlier than published-date. For additional information, see the explanation at the bottom of any best-seller list page on NYTimes.com (example: Hardcover Fiction, published Dec. 5 but reflecting sales to Nov. 29). (optional)
     - parameter weeksOnList: (query) The number of weeks that the best seller has been on list-name, as of bestsellers-date (optional)
     - parameter rank: (query) The rank of the best seller on list-name as of bestsellers-date (optional)
     - parameter rankLastWeek: (query) The rank of the best seller on list-name one week prior to bestsellers-date (optional)
     - parameter offset: (query) Sets the starting point of the result set (optional)
     - parameter sortOrder: (query) The default is ASC (ascending). The sort-order parameter is used with the sort-by parameter â€” for details, see each request type. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func gETListsDateListJson(date: String, list: String, isbn: Int? = nil, listName: String? = nil, publishedDate: Date? = nil, bestsellersDate: String? = nil, weeksOnList: Int? = nil, rank: String? = nil, rankLastWeek: Int? = nil, offset: Int? = nil, sortOrder: SortOrder_gETListsDateListJson? = nil, completion: @escaping ((_ data: InlineResponse2004?,_ error: Error?) -> Void)) {
        gETListsDateListJsonWithRequestBuilder(date: date, list: list, isbn: isbn, listName: listName, publishedDate: publishedDate, bestsellersDate: bestsellersDate, weeksOnList: weeksOnList, rank: rank, rankLastWeek: rankLastWeek, offset: offset, sortOrder: sortOrder).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Best Seller List by Date
     - GET /lists/{date}/{list}.json
     - 

     - API Key:
       - type: apiKey api-key (QUERY)
       - name: api-key
     - examples: [{contentType=application/json, example={
  "copyright" : "copyright",
  "last_modified" : "last_modified",
  "results" : {
    "bestsellers_date" : "bestsellers_date",
    "books" : [ {
      "isbns" : [ {
        "isbn13" : "isbn13",
        "isbn10" : "isbn10"
      }, {
        "isbn13" : "isbn13",
        "isbn10" : "isbn10"
      } ],
      "contributor_note" : "contributor_note",
      "dagger" : 1,
      "age_group" : "age_group",
      "author" : "author",
      "asterisk" : 6,
      "description" : "description",
      "primary_isbn10" : "primary_isbn10",
      "primary_isbn13" : "primary_isbn13",
      "title" : "title",
      "sunday_review_link" : "sunday_review_link",
      "article_chapter_link" : "article_chapter_link",
      "weeks_on_list" : 7,
      "contributor" : "contributor",
      "amazon_product_url" : "amazon_product_url",
      "book_review_link" : "book_review_link",
      "price" : 5,
      "book_image" : "book_image",
      "publisher" : "publisher",
      "rank" : 5,
      "rank_last_week" : 2,
      "first_chapter_link" : "first_chapter_link"
    }, {
      "isbns" : [ {
        "isbn13" : "isbn13",
        "isbn10" : "isbn10"
      }, {
        "isbn13" : "isbn13",
        "isbn10" : "isbn10"
      } ],
      "contributor_note" : "contributor_note",
      "dagger" : 1,
      "age_group" : "age_group",
      "author" : "author",
      "asterisk" : 6,
      "description" : "description",
      "primary_isbn10" : "primary_isbn10",
      "primary_isbn13" : "primary_isbn13",
      "title" : "title",
      "sunday_review_link" : "sunday_review_link",
      "article_chapter_link" : "article_chapter_link",
      "weeks_on_list" : 7,
      "contributor" : "contributor",
      "amazon_product_url" : "amazon_product_url",
      "book_review_link" : "book_review_link",
      "price" : 5,
      "book_image" : "book_image",
      "publisher" : "publisher",
      "rank" : 5,
      "rank_last_week" : 2,
      "first_chapter_link" : "first_chapter_link"
    } ],
    "corrections" : [ { }, { } ],
    "normal_list_ends_at" : 9,
    "list_name" : "list_name",
    "display_name" : "display_name",
    "published_date" : "published_date",
    "updated" : "updated"
  },
  "num_results" : 0,
  "status" : "status"
}}]
     - parameter date: (path)  
     - parameter list: (path) Name of the Best Sellers List. You can get the full list from /lists/names.json 
     - parameter isbn: (query) International Standard Book Number, 10 or 13 digits (optional)
     - parameter listName: (query) The name of the Times best-seller list. To get valid values, use a list names request.  Be sure to replace spaces with hyphens (e.g., e-book-fiction or hardcover-fiction, not E-Book Fiction or Hardcover Fiction). (The parameter is not case sensitive.) (optional)
     - parameter publishedDate: (query) YYYY-MM-DD  The date the best-seller list was published on NYTimes.com (compare bestsellers-date) (optional)
     - parameter bestsellersDate: (query) YYYY-MM-DD  The week-ending date for the sales reflected on list-name. Times best-seller lists are compiled using available book sale data. The bestsellers-date may be significantly earlier than published-date. For additional information, see the explanation at the bottom of any best-seller list page on NYTimes.com (example: Hardcover Fiction, published Dec. 5 but reflecting sales to Nov. 29). (optional)
     - parameter weeksOnList: (query) The number of weeks that the best seller has been on list-name, as of bestsellers-date (optional)
     - parameter rank: (query) The rank of the best seller on list-name as of bestsellers-date (optional)
     - parameter rankLastWeek: (query) The rank of the best seller on list-name one week prior to bestsellers-date (optional)
     - parameter offset: (query) Sets the starting point of the result set (optional)
     - parameter sortOrder: (query) The default is ASC (ascending). The sort-order parameter is used with the sort-by parameter â€” for details, see each request type. (optional)

     - returns: RequestBuilder<InlineResponse2004> 
     */
    open class func gETListsDateListJsonWithRequestBuilder(date: String, list: String, isbn: Int? = nil, listName: String? = nil, publishedDate: Date? = nil, bestsellersDate: String? = nil, weeksOnList: Int? = nil, rank: String? = nil, rankLastWeek: Int? = nil, offset: Int? = nil, sortOrder: SortOrder_gETListsDateListJson? = nil) -> RequestBuilder<InlineResponse2004> {
        var path = "/lists/{date}/{list}.json"
        let datePreEscape = "\(date)"
        let datePostEscape = datePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{date}", with: datePostEscape, options: .literal, range: nil)
        let listPreEscape = "\(list)"
        let listPostEscape = listPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{list}", with: listPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "isbn": isbn?.encodeToJSON(), 
                        "list-name": listName, 
                        "published-date": publishedDate?.encodeToJSON(), 
                        "bestsellers-date": bestsellersDate, 
                        "weeks-on-list": weeksOnList?.encodeToJSON(), 
                        "rank": rank, 
                        "rank-last-week": rankLastWeek?.encodeToJSON(), 
                        "offset": offset?.encodeToJSON(), 
                        "sort-order": sortOrder?.rawValue
        ])


        let requestBuilder: RequestBuilder<InlineResponse2004>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     * enum for parameter format
     */
    public enum Format_gETListsFormat: String { 
        case json = "json"
        case jsonp = "jsonp"
    }

    /**
     * enum for parameter sortOrder
     */
    public enum SortOrder_gETListsFormat: String { 
        case asc = "ASC"
        case desc = "DESC"
    }

    /**
     Best Seller List

     - parameter format: (path)  
     - parameter list: (query) The name of the Times best-seller list. To get valid values, use a list names request.  Be sure to replace spaces with hyphens (e.g., e-book-fiction or hardcover-fiction, not E-Book Fiction or Hardcover Fiction). (The parameter is not case sensitive.) (optional)
     - parameter weeksOnList: (query) The number of weeks that the best seller has been on list-name, as of bestsellers-date (optional)
     - parameter bestsellersDate: (query) YYYY-MM-DD  The week-ending date for the sales reflected on list-name. Times best-seller lists are compiled using available book sale data. The bestsellers-date may be significantly earlier than published-date. For additional information, see the explanation at the bottom of any best-seller list page on NYTimes.com (example: Hardcover Fiction, published Dec. 5 but reflecting sales to Nov. 29). (optional)
     - parameter date: (query) YYYY-MM-DD  The date the best-seller list was published on NYTimes.com (compare bestsellers-date) (optional)
     - parameter isbn: (query) International Standard Book Number, 10 or 13 digits (optional)
     - parameter publishedDate: (query) YYYY-MM-DD  The date the best-seller list was published on NYTimes.com (compare bestsellers-date) (optional)
     - parameter rank: (query) The rank of the best seller on list-name as of bestsellers-date (optional)
     - parameter rankLastWeek: (query) The rank of the best seller on list-name one week prior to bestsellers-date (optional)
     - parameter offset: (query) Sets the starting point of the result set (optional)
     - parameter sortOrder: (query) Sets the sort order of the result set (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func gETListsFormat(format: Format_gETListsFormat, list: String? = nil, weeksOnList: Int? = nil, bestsellersDate: Date? = nil, date: String? = nil, isbn: String? = nil, publishedDate: String? = nil, rank: Int? = nil, rankLastWeek: Int? = nil, offset: Int? = nil, sortOrder: SortOrder_gETListsFormat? = nil, completion: @escaping ((_ data: InlineResponse200?,_ error: Error?) -> Void)) {
        gETListsFormatWithRequestBuilder(format: format, list: list, weeksOnList: weeksOnList, bestsellersDate: bestsellersDate, date: date, isbn: isbn, publishedDate: publishedDate, rank: rank, rankLastWeek: rankLastWeek, offset: offset, sortOrder: sortOrder).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Best Seller List
     - GET /lists.{format}
     - 

     - API Key:
       - type: apiKey api-key (QUERY)
       - name: api-key
     - examples: [{contentType=application/json, example={
  "copyright" : "copyright",
  "last_modified" : "last_modified",
  "results" : [ {
    "isbns" : [ {
      "isbn13" : "isbn13",
      "isbn10" : "isbn10"
    }, {
      "isbn13" : "isbn13",
      "isbn10" : "isbn10"
    } ],
    "dagger" : 5,
    "asterisk" : 6,
    "book_details" : [ {
      "contributor_note" : "contributor_note",
      "contributor" : "contributor",
      "age_group" : "age_group",
      "author" : "author",
      "price" : 1,
      "description" : "description",
      "publisher" : "publisher",
      "primary_isbn10" : "primary_isbn10",
      "primary_isbn13" : "primary_isbn13",
      "title" : "title"
    }, {
      "contributor_note" : "contributor_note",
      "contributor" : "contributor",
      "age_group" : "age_group",
      "author" : "author",
      "price" : 1,
      "description" : "description",
      "publisher" : "publisher",
      "primary_isbn10" : "primary_isbn10",
      "primary_isbn13" : "primary_isbn13",
      "title" : "title"
    } ],
    "list_name" : "list_name",
    "display_name" : "display_name",
    "weeks_on_list" : 7,
    "bestsellers_date" : "bestsellers_date",
    "amazon_product_url" : "amazon_product_url",
    "reviews" : [ {
      "article_chapter_link" : "article_chapter_link",
      "book_review_link" : "book_review_link",
      "first_chapter_link" : "first_chapter_link",
      "sunday_review_link" : "sunday_review_link"
    }, {
      "article_chapter_link" : "article_chapter_link",
      "book_review_link" : "book_review_link",
      "first_chapter_link" : "first_chapter_link",
      "sunday_review_link" : "sunday_review_link"
    } ],
    "rank" : 5,
    "published_date" : "published_date",
    "rank_last_week" : 2
  }, {
    "isbns" : [ {
      "isbn13" : "isbn13",
      "isbn10" : "isbn10"
    }, {
      "isbn13" : "isbn13",
      "isbn10" : "isbn10"
    } ],
    "dagger" : 5,
    "asterisk" : 6,
    "book_details" : [ {
      "contributor_note" : "contributor_note",
      "contributor" : "contributor",
      "age_group" : "age_group",
      "author" : "author",
      "price" : 1,
      "description" : "description",
      "publisher" : "publisher",
      "primary_isbn10" : "primary_isbn10",
      "primary_isbn13" : "primary_isbn13",
      "title" : "title"
    }, {
      "contributor_note" : "contributor_note",
      "contributor" : "contributor",
      "age_group" : "age_group",
      "author" : "author",
      "price" : 1,
      "description" : "description",
      "publisher" : "publisher",
      "primary_isbn10" : "primary_isbn10",
      "primary_isbn13" : "primary_isbn13",
      "title" : "title"
    } ],
    "list_name" : "list_name",
    "display_name" : "display_name",
    "weeks_on_list" : 7,
    "bestsellers_date" : "bestsellers_date",
    "amazon_product_url" : "amazon_product_url",
    "reviews" : [ {
      "article_chapter_link" : "article_chapter_link",
      "book_review_link" : "book_review_link",
      "first_chapter_link" : "first_chapter_link",
      "sunday_review_link" : "sunday_review_link"
    }, {
      "article_chapter_link" : "article_chapter_link",
      "book_review_link" : "book_review_link",
      "first_chapter_link" : "first_chapter_link",
      "sunday_review_link" : "sunday_review_link"
    } ],
    "rank" : 5,
    "published_date" : "published_date",
    "rank_last_week" : 2
  } ],
  "num_results" : 0,
  "status" : "status"
}}]
     - parameter format: (path)  
     - parameter list: (query) The name of the Times best-seller list. To get valid values, use a list names request.  Be sure to replace spaces with hyphens (e.g., e-book-fiction or hardcover-fiction, not E-Book Fiction or Hardcover Fiction). (The parameter is not case sensitive.) (optional)
     - parameter weeksOnList: (query) The number of weeks that the best seller has been on list-name, as of bestsellers-date (optional)
     - parameter bestsellersDate: (query) YYYY-MM-DD  The week-ending date for the sales reflected on list-name. Times best-seller lists are compiled using available book sale data. The bestsellers-date may be significantly earlier than published-date. For additional information, see the explanation at the bottom of any best-seller list page on NYTimes.com (example: Hardcover Fiction, published Dec. 5 but reflecting sales to Nov. 29). (optional)
     - parameter date: (query) YYYY-MM-DD  The date the best-seller list was published on NYTimes.com (compare bestsellers-date) (optional)
     - parameter isbn: (query) International Standard Book Number, 10 or 13 digits (optional)
     - parameter publishedDate: (query) YYYY-MM-DD  The date the best-seller list was published on NYTimes.com (compare bestsellers-date) (optional)
     - parameter rank: (query) The rank of the best seller on list-name as of bestsellers-date (optional)
     - parameter rankLastWeek: (query) The rank of the best seller on list-name one week prior to bestsellers-date (optional)
     - parameter offset: (query) Sets the starting point of the result set (optional)
     - parameter sortOrder: (query) Sets the sort order of the result set (optional)

     - returns: RequestBuilder<InlineResponse200> 
     */
    open class func gETListsFormatWithRequestBuilder(format: Format_gETListsFormat, list: String? = nil, weeksOnList: Int? = nil, bestsellersDate: Date? = nil, date: String? = nil, isbn: String? = nil, publishedDate: String? = nil, rank: Int? = nil, rankLastWeek: Int? = nil, offset: Int? = nil, sortOrder: SortOrder_gETListsFormat? = nil) -> RequestBuilder<InlineResponse200> {
        var path = "/lists.{format}"
        let formatPreEscape = "\(format.rawValue)"
        let formatPostEscape = formatPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{format}", with: formatPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "list": list, 
                        "weeks-on-list": weeksOnList?.encodeToJSON(), 
                        "bestsellers-date": bestsellersDate?.encodeToJSON(), 
                        "date": date, 
                        "isbn": isbn, 
                        "published-date": publishedDate, 
                        "rank": rank?.encodeToJSON(), 
                        "rank-last-week": rankLastWeek?.encodeToJSON(), 
                        "offset": offset?.encodeToJSON(), 
                        "sort-order": sortOrder?.rawValue
        ])


        let requestBuilder: RequestBuilder<InlineResponse200>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     * enum for parameter format
     */
    public enum Format_gETListsNamesFormat: String { 
        case json = "json"
        case jsonp = "jsonp"
    }

    /**
     Best Seller List Names

     - parameter format: (path)  
     - parameter apiKey: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func gETListsNamesFormat(format: Format_gETListsNamesFormat, apiKey: String? = nil, completion: @escaping ((_ data: InlineResponse2002?,_ error: Error?) -> Void)) {
        gETListsNamesFormatWithRequestBuilder(format: format, apiKey: apiKey).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Best Seller List Names
     - GET /lists/names.{format}
     - 

     - API Key:
       - type: apiKey api-key (QUERY)
       - name: api-key
     - examples: [{contentType=application/json, example={
  "copyright" : "copyright",
  "results" : [ {
    "newest_published_date" : "newest_published_date",
    "oldest_published_date" : "oldest_published_date",
    "list_name" : "list_name",
    "list_name_encoded" : "list_name_encoded",
    "display_name" : "display_name",
    "updated" : "updated"
  }, {
    "newest_published_date" : "newest_published_date",
    "oldest_published_date" : "oldest_published_date",
    "list_name" : "list_name",
    "list_name_encoded" : "list_name_encoded",
    "display_name" : "display_name",
    "updated" : "updated"
  } ],
  "num_results" : 0,
  "status" : "status"
}}]
     - parameter format: (path)  
     - parameter apiKey: (query)  (optional)

     - returns: RequestBuilder<InlineResponse2002> 
     */
    open class func gETListsNamesFormatWithRequestBuilder(format: Format_gETListsNamesFormat, apiKey: String? = nil) -> RequestBuilder<InlineResponse2002> {
        var path = "/lists/names.{format}"
        let formatPreEscape = "\(format.rawValue)"
        let formatPostEscape = formatPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{format}", with: formatPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "api-key": apiKey
        ])


        let requestBuilder: RequestBuilder<InlineResponse2002>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     * enum for parameter format
     */
    public enum Format_gETListsOverviewFormat: String { 
        case json = "json"
        case jsonp = "jsonp"
    }

    /**
     Best Seller List Overview

     - parameter format: (path)  
     - parameter publishedDate: (query) The best-seller list publication date. YYYY-MM-DD  You do not have to specify the exact date the list was published. The service will search forward (into the future) for the closest publication date to the date you specify. For example, a request for lists/overview/2013-05-22 will retrieve the list that was published on 05-26.  If you do not include a published_date, the current week&#x27;s best-sellers lists will be returned. (optional)
     - parameter apiKey: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func gETListsOverviewFormat(format: Format_gETListsOverviewFormat, publishedDate: String? = nil, apiKey: String? = nil, completion: @escaping ((_ data: InlineResponse2003?,_ error: Error?) -> Void)) {
        gETListsOverviewFormatWithRequestBuilder(format: format, publishedDate: publishedDate, apiKey: apiKey).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Best Seller List Overview
     - GET /lists/overview.{format}
     - 

     - API Key:
       - type: apiKey api-key (QUERY)
       - name: api-key
     - examples: [{contentType=application/json, example={
  "copyright" : "copyright",
  "results" : {
    "bestsellers_date" : "bestsellers_date",
    "lists" : [ {
      "books" : [ {
        "contributor_note" : "contributor_note",
        "age_group" : "age_group",
        "author" : "author",
        "description" : "description",
        "primary_isbn10" : "primary_isbn10",
        "primary_isbn13" : "primary_isbn13",
        "title" : "title",
        "contributor" : "contributor",
        "price" : 6,
        "publisher" : "publisher",
        "rank" : 1,
        "created_date" : "created_date",
        "updated_date" : "updated_date"
      }, {
        "contributor_note" : "contributor_note",
        "age_group" : "age_group",
        "author" : "author",
        "description" : "description",
        "primary_isbn10" : "primary_isbn10",
        "primary_isbn13" : "primary_isbn13",
        "title" : "title",
        "contributor" : "contributor",
        "price" : 6,
        "publisher" : "publisher",
        "rank" : 1,
        "created_date" : "created_date",
        "updated_date" : "updated_date"
      } ],
      "list_id" : 5,
      "list_image" : "list_image",
      "list_name" : "list_name",
      "display_name" : "display_name",
      "updated" : "updated"
    }, {
      "books" : [ {
        "contributor_note" : "contributor_note",
        "age_group" : "age_group",
        "author" : "author",
        "description" : "description",
        "primary_isbn10" : "primary_isbn10",
        "primary_isbn13" : "primary_isbn13",
        "title" : "title",
        "contributor" : "contributor",
        "price" : 6,
        "publisher" : "publisher",
        "rank" : 1,
        "created_date" : "created_date",
        "updated_date" : "updated_date"
      }, {
        "contributor_note" : "contributor_note",
        "age_group" : "age_group",
        "author" : "author",
        "description" : "description",
        "primary_isbn10" : "primary_isbn10",
        "primary_isbn13" : "primary_isbn13",
        "title" : "title",
        "contributor" : "contributor",
        "price" : 6,
        "publisher" : "publisher",
        "rank" : 1,
        "created_date" : "created_date",
        "updated_date" : "updated_date"
      } ],
      "list_id" : 5,
      "list_image" : "list_image",
      "list_name" : "list_name",
      "display_name" : "display_name",
      "updated" : "updated"
    } ],
    "published_date" : "published_date"
  },
  "num_results" : 0,
  "status" : "status"
}}]
     - parameter format: (path)  
     - parameter publishedDate: (query) The best-seller list publication date. YYYY-MM-DD  You do not have to specify the exact date the list was published. The service will search forward (into the future) for the closest publication date to the date you specify. For example, a request for lists/overview/2013-05-22 will retrieve the list that was published on 05-26.  If you do not include a published_date, the current week&#x27;s best-sellers lists will be returned. (optional)
     - parameter apiKey: (query)  (optional)

     - returns: RequestBuilder<InlineResponse2003> 
     */
    open class func gETListsOverviewFormatWithRequestBuilder(format: Format_gETListsOverviewFormat, publishedDate: String? = nil, apiKey: String? = nil) -> RequestBuilder<InlineResponse2003> {
        var path = "/lists/overview.{format}"
        let formatPreEscape = "\(format.rawValue)"
        let formatPostEscape = formatPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{format}", with: formatPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "published_date": publishedDate, 
                        "api-key": apiKey
        ])


        let requestBuilder: RequestBuilder<InlineResponse2003>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     * enum for parameter format
     */
    public enum Format_gETReviewsFormat: String { 
        case json = "json"
        case jsonp = "jsonp"
    }

    /**
     Reviews

     - parameter format: (path)  
     - parameter isbn: (query) Searching by ISBN is the recommended method. You can enter 10- or 13-digit ISBNs. (optional)
     - parameter title: (query) Youâ€™ll need to enter the full title of the book. Spaces in the title will be converted into the characters %20. (optional)
     - parameter author: (query) Youll need to enter the authors first and last name, separated by a space. This space will be converted into the characters %20. (optional)
     - parameter apiKey: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func gETReviewsFormat(format: Format_gETReviewsFormat, isbn: Int? = nil, title: String? = nil, author: String? = nil, apiKey: String? = nil, completion: @escaping ((_ data: InlineResponse2005?,_ error: Error?) -> Void)) {
        gETReviewsFormatWithRequestBuilder(format: format, isbn: isbn, title: title, author: author, apiKey: apiKey).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Reviews
     - GET /reviews.{format}
     - 

     - API Key:
       - type: apiKey api-key (QUERY)
       - name: api-key
     - examples: [{contentType=application/json, example={
  "copyright" : "copyright",
  "results" : [ {
    "summary" : "summary",
    "book_title" : "book_title",
    "isbn13" : [ "isbn13", "isbn13" ],
    "book_author" : "book_author",
    "byline" : "byline",
    "publication_dt" : "publication_dt",
    "url" : "url"
  }, {
    "summary" : "summary",
    "book_title" : "book_title",
    "isbn13" : [ "isbn13", "isbn13" ],
    "book_author" : "book_author",
    "byline" : "byline",
    "publication_dt" : "publication_dt",
    "url" : "url"
  } ],
  "num_results" : 0,
  "status" : "status"
}}]
     - parameter format: (path)  
     - parameter isbn: (query) Searching by ISBN is the recommended method. You can enter 10- or 13-digit ISBNs. (optional)
     - parameter title: (query) Youâ€™ll need to enter the full title of the book. Spaces in the title will be converted into the characters %20. (optional)
     - parameter author: (query) Youll need to enter the authors first and last name, separated by a space. This space will be converted into the characters %20. (optional)
     - parameter apiKey: (query)  (optional)

     - returns: RequestBuilder<InlineResponse2005> 
     */
    open class func gETReviewsFormatWithRequestBuilder(format: Format_gETReviewsFormat, isbn: Int? = nil, title: String? = nil, author: String? = nil, apiKey: String? = nil) -> RequestBuilder<InlineResponse2005> {
        var path = "/reviews.{format}"
        let formatPreEscape = "\(format.rawValue)"
        let formatPostEscape = formatPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{format}", with: formatPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "isbn": isbn?.encodeToJSON(), 
                        "title": title, 
                        "author": author, 
                        "api-key": apiKey
        ])


        let requestBuilder: RequestBuilder<InlineResponse2005>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
}
